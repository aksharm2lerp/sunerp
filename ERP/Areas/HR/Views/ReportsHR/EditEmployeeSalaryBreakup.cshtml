@using System.Data;
@*@model Business.Entities.Employee.EmployeeSalaryBreakup*@
@model System.Data.DataTable;
@{
    ViewData["Title"] = "Edit Employee Salary";
    Layout = "~/Views/Shared/_LayoutMaster.cshtml";
}
@{
    var dataset = Model;
    string dataTable = string.Empty;
    int? empId = ViewBag.EmployeeID;
    int? companyId = ViewBag.CompanyID;
    int? month = ViewBag.Month;
    int? empCatId = ViewBag.EmployeeCategoryID;
    int? year = ViewBag.Year;
    Dictionary<string, string> dynamicModel = new Dictionary<string, string>();
}
<div class="container" id="employeeSalalrySummary">
    <div class="row">
        <div class="col-sm-12 col-md-12 col-lg-12 mx-auto">
            <div class="card border-0 shadow rounded-3">
                <div class="card-body">

                    <div class="col-sm-12 col-md-6 col-lg-6">
                        <div class="page-breadcrumb align-items-center">
                            <div class="p-2">
                                <nav aria-label="breadcrumb">
                                    <ol class="breadcrumb mb-0 p-0">
                                        <li class="breadcrumb-item">
                                            <a asp-area="HR" asp-controller="ReportsHR" asp-action="GetEmployeeSalarySummary"><i class="bx bx-home-alt"></i></a>
                                        </li>
                                        <li class="breadcrumb-item active" aria-current="page">Edit Employee Salary</li>
                                    </ol>
                                </nav>
                            </div>
                        </div>
                    </div>
                    <hr />
                    <form method="post" id="formEditEmployeeSalaryBreakup" class="row g-3 needs-validation">
                        <input type="hidden" asp-for="@empId" id="employeeId" />

                        <div class=" col-sm-12 col-md-6 col-lg-6 border border-dark" id="divForEarnings">

                            <div class="row mb-2">
                                <label for="" class="col-sm-3 col-form-label " color="blue">EARNINGS:</label>
                            </div>
                            <div id="nestedDivForEarnings">

                                @{
                                    if (Model != null && Model.Rows.Count > 0)
                                    {
                                        dataTable = Newtonsoft.Json.JsonConvert.SerializeObject(Model).ToString();
                                        int i = 0;
                                        var columnName = Model.Columns["SalaryTypeID"].ToString();
                                        foreach (DataRow item in Model.Rows)
                                        {
                                            int salaryTypeId = Convert.ToInt32(item[columnName]);
                                            if (salaryTypeId == 1)
                                            {
                                                string labelValue = Convert.ToString(item[13]);
                                                string formulatext = Convert.ToString(item[9]);
                                                string finalValue = (string.IsNullOrEmpty(labelValue) && string.IsNullOrEmpty(formulatext) && labelValue.Equals("") && formulatext.Equals("")) ? "0.00" : labelValue;

                                                <div class="row mb-1">
                                                    <div class="col-sm-3">
                                                        <label for="" class="col-form-label">@Convert.ToString(item[7])</label>
                                                    </div>
                                                    <div class="col-sm-1">
                                                        <label for="" class="col-form-label">(@Convert.ToString(item[8]).Replace(" ", ""))</label>
                                                    </div>
                                                    <div class="col-sm-5">
                                                        @*<input type="text" class="form-control" id="@Convert.ToString(item[8]).Replace(" ","")" placeholder="@Convert.ToString(item[9])" value="@finalValue" oninput="fnUpdateAmount()">*@

                                                        @* <input type="text" class="form-control" id="@Convert.ToString(item[8]).Replace(" ","")" placeholder="@Convert.ToString(item[9])" value="@finalValue" @(Convert.ToString(item[8]).Replace(" ", "").Equals("K") ? "oninput=fnUpdateHRA()" : "oninput=fnUpdateAmount()") @(Convert.ToString(item[8]).Replace(" ", "").Equals("L") ? "oninput=fnUpdateTA()" : "oninput=fnUpdateAmount()") @(Convert.ToString(item[8]).Replace(" ", "").Equals("J") ? "oninput=fnUpdateBasic()" : "oninput=fnUpdateAmount()")>*@


                                                        @{
                                                            if (Convert.ToString(item[8]).Replace(" ", "").Equals("A") || Convert.ToString(item[8]).Replace(" ", "").Equals("B") || Convert.ToString(item[8]).Replace(" ", "").Equals("C"))
                                                            {
                                                            // <input type="text" class="form-control" id="@Convert.ToString(item[8]).Replace(" ","")" placeholder="@Convert.ToString(item[9])" value="@finalValue" oninput="fnUpdateActualPayable()">
                                                                // Commented above line by Rahul Mistry on 14th June 2024 according to Sandip sir.

                                                                <input type="text" class="form-control" id="@Convert.ToString(item[8]).Replace(" ","")" placeholder="@Convert.ToString(item[9])" value="@finalValue" oninput="">
                                                            }
                                                            @*if (Convert.ToString(item[8]).Replace(" ", "").Equals("B"))
                                        {
                                        <input type="text" class="form-control" id="@Convert.ToString(item[8]).Replace(" ","")" placeholder="@Convert.ToString(item[9])" value="@finalValue" oninput="fnUpdateActualPayable()">
                                        }
                                        if (Convert.ToString(item[8]).Replace(" ", "").Equals("C"))
                                        {
                                        <input type="text" class="form-control" id="@Convert.ToString(item[8]).Replace(" ","")" placeholder="@Convert.ToString(item[9])" value="@finalValue" oninput="fnUpdateActualPayable()">
                                        }*@

                                                            if (Convert.ToString(item[8]).Replace(" ", "").Equals("J"))
                                                            {
                                                            //<input type="text" class="form-control" id="@Convert.ToString(item[8]).Replace(" ","")" placeholder="@Convert.ToString(item[9])" value="@finalValue" oninput="fnUpdateBasic()">
                                                                // Commented above line by Rahul Mistry on 14th June 2024 according to Sandip sir.
                                                                <input type="text" class="form-control" id="@Convert.ToString(item[8]).Replace(" ","")" placeholder="@Convert.ToString(item[9])" value="@finalValue" oninput="">
                                                            }
                                                            if (Convert.ToString(item[8]).Replace(" ", "").Equals("K"))
                                                            {
                                                            // <input type="text" class="form-control" id="@Convert.ToString(item[8]).Replace(" ","")" placeholder="@Convert.ToString(item[9])" value="@finalValue" oninput="fnUpdateHRA()">
                                                                // Commented above line by Rahul Mistry on 14th June 2024 according to Sandip sir.
                                                                <input type="text" class="form-control" id="@Convert.ToString(item[8]).Replace(" ","")" placeholder="@Convert.ToString(item[9])" value="@finalValue" oninput="">
                                                            }
                                                            if (Convert.ToString(item[8]).Replace(" ", "").Equals("L"))
                                                            {
                                                            // <input type="text" class="form-control" id="@Convert.ToString(item[8]).Replace(" ","")" placeholder="@Convert.ToString(item[9])" value="@finalValue" oninput="fnUpdateTA()">
                                                                // Commented above line by Rahul Mistry on 14th June 2024 according to Sandip sir.
                                                                <input type="text" class="form-control" id="@Convert.ToString(item[8]).Replace(" ","")" placeholder="@Convert.ToString(item[9])" value="@finalValue" oninput="">
                                                            }
                                                            if (!Convert.ToString(item[8]).Replace(" ", "").Equals("A") && !Convert.ToString(item[8]).Replace(" ", "").Equals("B") && !Convert.ToString(item[8]).Replace(" ", "").Equals("C") && !Convert.ToString(item[8]).Replace(" ", "").Equals("J") && !Convert.ToString(item[8]).Replace(" ", "").Equals("K") && !Convert.ToString(item[8]).Replace(" ", "").Equals("L"))
                                                            {
                                                                // <input type="text" class="form-control" id="@Convert.ToString(item[8]).Replace(" ","")" placeholder="@Convert.ToString(item[9])" value="@finalValue" oninput="fnUpdateAmount()">
                                                                // Commented above line by Rahul Mistry on 14th June 2024 according to Sandip sir.
                                                                <input type="text" class="form-control" id="@Convert.ToString(item[8]).Replace(" ","")" placeholder="@Convert.ToString(item[9])" value="@finalValue" oninput="">
                                                            }
                                                        }
                                                        <input type="hidden" value="@Convert.ToString(item[6])">
                                                    </div>
                                                    <div class="col-sm-3">
                                                        <label for="" class="col-form-label">@Convert.ToString(item[9])</label>
                                                    </div>
                                                </div>
                                            }
                                            i++;
                                        }
                                    }
                                }

                            </div>
                        </div>

                        <div class=" col-sm-12 col-md-6 col-lg-6 border border-dark" id="divForDeductions">

                            <div class="row">
                                <label for="" class="col-sm-3 col-form-label " color="blue">DEDUCTIONS:</label>
                            </div>
                            <div id="nestedDivForDeductions">

                                @{
                                    if (Model != null && Model.Rows.Count > 0)
                                    {
                                        int i = 0;
                                        var columnName = Model.Columns["SalaryTypeID"].ToString();
                                        foreach (DataRow item in Model.Rows)
                                        {
                                            int salaryTypeId = Convert.ToInt32(item[columnName]);
                                            if (salaryTypeId == 2)
                                            {
                                                string labelValue = Convert.ToString(item[13]);
                                                string formulatext = Convert.ToString(item[9]);
                                                string finalValue = (string.IsNullOrEmpty(labelValue) && string.IsNullOrEmpty(formulatext) && labelValue.Equals("") && formulatext.Equals("")) ? "0.00" : labelValue;
                                                <div class="row mb-1">
                                                    <div class="col-sm-3">
                                                        <label for="" class="col-form-label">@Convert.ToString(item[7])</label>
                                                    </div>
                                                    <div class="col-sm-1">
                                                        <label for="" class="col-form-label">(@Convert.ToString(item[8]).Replace(" ", ""))</label>
                                                    </div>
                                                    <div class="col-sm-5">

                                                        @*<input type="text" class="form-control" id="@Convert.ToString(item[8]).Replace(" ","")" placeholder="@Convert.ToString(item[9])" value="@finalValue" oninput="fnUpdateAmount()">
                                                        // Commented above line by Rahul Mistry on 14th June 2024 according to Sandip sir.*@
                                                        <input type="text" class="form-control" id="@Convert.ToString(item[8]).Replace(" ","")" placeholder="@Convert.ToString(item[9])" value="@finalValue" oninput="">
                                                        <input type="hidden" value="@Convert.ToString(item[6])">
                                                    </div>
                                                    <div class="col-sm-3">
                                                        <label for="" class="col-form-label">@Convert.ToString(item[9])</label>
                                                    </div>
                                                </div>
                                            }
                                            i++;
                                        }
                                    }
                                }

                            </div>
                        </div>

                        <!--div>
                            <button type="button" class="btn btn-primary btn-info px-5 ladda-button" onclick="fnUpdateAmount()">Calculation on Formula</button>

                            <label for="" class="col-sm-4 col-form-label text-end">Salary Calculation with Formula</label>&nbsp;
                        </!--div>-->

                        <div>
                            <button type="button" onclick="fnOpenConfirmationBox()" class="btn btn-primary btn-info px-5 ladda-button" id="btnApprovSaveEmployeeSalaryBreakup">Approve & Save</button>
                            @* <button type="submit" onclick="fnSaveEmployeeSalaryBreakup()" class="btn btn-primary btn-info px-5 ladda-button" id="btnSaveEmployeeSalaryBreakup">Save</button>*@
                            @*<button type="button" class="btn btn-primary btn-info px-5 ladda-button" data-bs-dismiss="offcanvas" aria-l abel="Close">Cancel</button>*@
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">User Confirmation</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to verify and approve employee salary?
            </div>
            <div class="modal-footer">
                <a onclick="fnApprovSaveCalculatedSalary()" class="btn btn-primary">Confirm</a>
                <!--<button type="button" class="btn btn-primary" onclick="fnAddParty()">Save</button>-->
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Back</button>
            </div>
        </div>
    </div>
</div>

@await Html.PartialAsync("_ValidationScriptsPartial")

<script type="text/javascript">

    /* function fnSaveEmployeeSalaryBreakup() {
         var ls = laddaStart('btnSaveEmployeeSalaryBreakup');
         modeldata = $("#formEditEmployeeSalaryBreakup").serialize();
         $.ajax({
             type: 'POST',
             url: '/Admin/Employee/AddUpdateEmployeeSalaryBreakup/',
             data: modeldata,
             dataType: 'json',
             beforeSend: function () { },
             success: function (data) {
                 console.log(data.status);
                 if (data.status) {
                     //notification
                     //$("#canvasEmployeeHRAdministration").hide();//('hide');
                     var test = Lobibox.notify('success', {
                         pauseDelayOnHover: true,
                         size: 'mini',
                         icon: 'bx bx-check-circle',
                         continueDelayOnInactiveTab: false,
                         position: 'bottom right',
                         msg: data.message,
                     });
                     setTimeout(
                         function () {
                             //window.location.reload();
                             $("#formEditEmployeeSalaryBreakup").load(window.location.href + " #formEditEmployeeSalaryBreakup");
                         }, 3000);

                 }
                 else {
                     Lobibox.notify('error', {
                         pauseDelayOnHover: true,
                         size: 'mini',
                         icon: 'bx bx-check-circle',
                         continueDelayOnInactiveTab: false,
                         position: 'bottom right',
                         msg: 'MessageHelper.Error'
                     });
                 }
             },
             error: function (error) {
                 laddaStop(ls);
                 Lobibox.notify('error', {
                     pauseDelayOnHover: true,
                     size: 'mini',
                     icon: 'bx bx-check-circle',
                     continueDelayOnInactiveTab: false,
                     position: 'bottom right',
                     msg: 'MessageHelper.Error'
                 });
             }
         }).always(function () {
             hideloader();
         });

     };*/

    var jsonObjectOK = @Html.Raw(dataTable);
    var filteredResult;

    function fnCalculateSalary() {

        var dataTableObject = jsonObjectOK;

        //let ctc = document.getElementById('CostToCompany').value;

        filteredResult = dataTableObject.filter((obj) => {
            return obj.SalaryFormulaText !== null && obj.SalaryFormulaText !== '';
        });

        //alert(test[0].SalaryFormulaText);
        //const divEarnings = document.getElementById('divForEarnings');
        //const divWithInput = divEarnings.querySelectorAll('input[type=text]');
        //for (let i = 0; i < divWithInput.length; i++) {
        //    const inputId = divWithInput[i].id;
        //}
        let indexLength = Number(filteredResult.length - 1);
        if (filteredResult.length > 0) {
            $.each(filteredResult, function (i, k) {
                let test = k.SalaryFormulaText;
                let targetId = test.charAt(0);
                var slicedValues = test.slice(2);
                if (test !== null && test !== "") {
                    for (const strChar of slicedValues) {
                        var replaceValue = document.getElementById(strChar);
                        if (replaceValue) {
                            let repValue = replaceValue.value;
                            slicedValues = slicedValues.replace(strChar, repValue);
                        }
                        else {
                            if (!replaceValue && slicedValues.includes('-' + strChar) && (strChar !== '0' && strChar !== '.')) {
                                slicedValues = slicedValues.replace(strChar, 0);
                            }
                            if (!replaceValue && slicedValues.includes('*' + strChar) && (strChar !== '0' && strChar !== '.')) {
                                slicedValues = slicedValues.replace(strChar, 1);
                            }
                        }
                    }
                }
                let calcValue = slicedValues;//.replace('D', 1).replace('I', 1);
                let id = document.getElementById(targetId);
                var vals = eval(calcValue);
                if (id && vals) {
                    id.value = Number(parseFloat(vals.toFixed(0)));
                    if (indexLength === i) {
                        document.getElementById('X').value = Number(parseFloat(vals.toFixed(0)));
                    }
                }
            });
        }
    }

    /*window.onload = function () {
        alert('unwanted function invoked.');
        let urlEmployeeActualDays = 'Url.Action("GetEmployeeSalaryBreakupDetail","Employee")';
        let employeeId = document.getElementById('employeeId').value;
        let params = { employeeId: employeeId };

        $.ajax({
            type: 'GET',
            url: urlEmployeeActualDays,
            data: params,
            dataType: 'json',
            success: function (data) {
                if (data.status) {
                    alert('unwanted function invoked.');
                }
                else {
                    Lobibox.notify('error', {
                        pauseDelayOnHover: true,
                        size: 'mini',
                        icon: 'bx bx-check-circle',
                        continueDelayOnInactiveTab: false,
                        position: 'bottom right',
                        msg: 'Error to load employees actual days.'
                    });
                }
            },
            error: function (error) {
                laddaStop(ls);
                Lobibox.notify('error', {
                    pauseDelayOnHover: true,
                    size: 'mini',
                    icon: 'bx bx-check-circle',
                    continueDelayOnInactiveTab: false,
                    position: 'bottom right',
                    msg: 'MessageHelper.Error'
                });
            }
        }).always(function () {
            hideloader();
        });

    };*/

    function fnOpenConfirmationBox() {
        $('#confirmationModal').modal('show');
    }

    function fnApprovSaveCalculatedSalary() {

        let employeeId = @empId;
        let companyId = @companyId;
        let month = @month;
        let year = @year;
        let empCateId = @empCatId;

        // const divEarnings = document.getElementById('divForEarnings');
        // const divEarningsWithInput = divEarnings.querySelectorAll('input[type=text]');
        // const divEarningsWithHidden = divEarnings.querySelectorAll('input[type=hidden]');

        const nesteddivForEarnings = document.getElementById('nestedDivForEarnings');
        const divEarningsWithLabel = nesteddivForEarnings.querySelectorAll('label');

        // const divDeductions = document.getElementById('divForDeductions');
        // const divDeductionsWithInput = divDeductions.querySelectorAll('input[type=text]');
        // const divDeductionsWithHidden = divDeductions.querySelectorAll('input[type=hidden]');

        const nesteddivForDeductions = document.getElementById('nestedDivForDeductions');
        const divDeductionsWithLabel = nesteddivForDeductions.querySelectorAll('label');

        var jsonFinalSalaryCalculationData = [];

        for (let i = 0; i < divEarningsWithLabel.length; i += 3) {

            const pair = [divEarningsWithLabel[i], divEarningsWithLabel[i + 1], divEarningsWithLabel[i + 2]].filter(Boolean);

            const tempJson = {
                'SalaryHeadName': pair[0].textContent,
                'SalaryHeadLabel': pair[1].textContent.replace('(', '').replace(')', ''),
                'SalaryFormula': pair[2].textContent,
                'CalculatedValue': document.getElementById(pair[1].textContent.replace('(', '').replace(')', '')).value
            };

            jsonFinalSalaryCalculationData.push(tempJson);
        }

        for (let i = 0; i < divDeductionsWithLabel.length; i += 3) {

            const pair = [divDeductionsWithLabel[i], divDeductionsWithLabel[i + 1], divDeductionsWithLabel[i + 2]].filter(Boolean);

            const tempJson = {
                'SalaryHeadName': pair[0].textContent,
                'SalaryHeadLabel': pair[1].textContent.replace('(', '').replace(')', ''),
                'SalaryFormula': pair[2].textContent,
                'CalculatedValue': document.getElementById(pair[1].textContent.replace('(', '').replace(')', '')).value
            };

            jsonFinalSalaryCalculationData.push(tempJson);
        }
        /*for (let i = 0; i < divDeductionsWithHidden.length; i++) {
            const salaryHeadID = divDeductionsWithHidden[i].value;
            const salaryHeadValue = divDeductionsWithInput[i].value;
            const tempJson = { 'EmployeeSalaryBreakupID': 0, 'EmployeeID': employeeId, 'SalaryHeadID': salaryHeadID, 'SalaryHeadValue': salaryHeadValue };
            jsonFinalSalaryCalculationData.push(tempJson);
        }*/

        var jsonString = JSON.stringify(jsonFinalSalaryCalculationData);
        let parameters = { employeeFinalSalaryJson: jsonString, employeeId: employeeId, month: month, year: year, companyId: companyId, employeeCategoryId: empCateId };
        $.ajax({
            type: 'post',
            url: '/HR/ReportsHR/ApproveSaveEmployeeSalary',
            data: parameters,
            dataType: 'json',
            success: function (data) {
                if (data.status) {
                    $('#confirmationModal').modal('hide');
                    var test = Lobibox.notify('success', {
                        pauseDelayOnHover: true,
                        size: 'mini',
                        icon: 'bx bx-check-circle',
                        continueDelayOnInactiveTab: false,
                        position: 'bottom right',
                        msg: 'Employee salary verified and approved successfully.',
                    });
                    setTimeout(
                        function () {
                            //window.location.reload();

                            $("#formEditEmployeeSalaryBreakup").load(window.location.href + " #formEditEmployeeSalaryBreakup");
                        }, 3000);

                }
                else {
                    Lobibox.notify('error', {
                        pauseDelayOnHover: true,
                        size: 'mini',
                        icon: 'bx bx-check-circle',
                        continueDelayOnInactiveTab: false,
                        position: 'bottom right',
                        msg: 'Employee salary not approved due to unable to verify salary.'
                    });
                }
            },
            error: function (error) {
                alert('url not correct. | ERROR FUNCTION');
                laddaStop(ls);
                Lobibox.notify('error', {
                    pauseDelayOnHover: true,
                    size: 'mini',
                    icon: 'bx bx-check-circle',
                    continueDelayOnInactiveTab: false,
                    position: 'bottom right',
                    msg: '@MessageHelper.Error'
                });
            }
        }).always(function () {
            hideloader();
        });
    };

    function fnUpdateAmount() {

        let actualDays = parseFloat(document.getElementById('A').value) ?? 0;
        let actualWages = parseFloat(document.getElementById('B').value) ?? 0;
        let otHours = parseFloat(document.getElementById('C').value) ?? 0;
        let interstOnLoan = parseFloat(document.getElementById('D').value) ?? 0;
        let actualPayable = parseFloat(document.getElementById('E').value) ?? 0;
        let noOfDays = parseFloat(document.getElementById('F').value) ?? 0;
        let basicPerDay = parseFloat(document.getElementById('G').value) ?? 0;
        let daPerDay = parseFloat(document.getElementById('H').value) ?? 0;

        let total = basicPerDay + daPerDay;
        let daPercent = Number(((daPerDay / total) * 100).toFixed(2));
        let basicPercent = Number((100 - daPercent).toFixed(2));


        if (actualDays !== NaN && actualDays >= 0 && actualPayable !== NaN && actualPayable >= 0) {

            // if (interstOnLoan !== NaN && interstOnLoan > 0) {
            //     document.getElementById('E').value = Number(actualPayable - document.getElementById('E').value);
            // }
            document.getElementById('B').value = Number((actualPayable / actualDays).toFixed(2));

            let jValue = document.getElementById('J');
            jValue.value = Number(total * noOfDays);

            let kValue = document.getElementById('K');
            kValue.value = Number(actualPayable * 0.3);

            let lValue = document.getElementById('L');
            lValue.value = Number(actualPayable - parseFloat(jValue.value) - parseFloat(kValue.value));

            let qValue = document.getElementById('Q');
            qValue.value = Number(parseFloat(jValue.value) + parseFloat(kValue.value) + parseFloat(lValue.value));

            let nValue = document.getElementById('N');
            nValue.value = Number((parseFloat(jValue.value) * 0.12).toFixed(2));

            let oValue = document.getElementById('O');
            oValue.value = Number((parseFloat(jValue.value) * 0.0833).toFixed(2));

            let pValue = document.getElementById('P');
            pValue.value = Number((parseFloat(jValue.value) * 0.0367).toFixed(2));

            let xValue = document.getElementById('X');
            let rValue = 0;

            if (qValue.value > 11999) {
                let newRValue = document.getElementById('R');
                rValue = newRValue.value;
            }

            let sValue = document.getElementById('S');
            let tValue = document.getElementById('T');
            let uValue = document.getElementById('U');
            let vValue = document.getElementById('V');
            let wValue = document.getElementById('W');

            xValue.value = Number(parseFloat(qValue.value) - parseFloat(rValue) - parseFloat(sValue.value) - parseFloat(tValue.value) - parseFloat(uValue.value) - parseFloat(wValue.value) - parseFloat(vValue.value));
        }
    };

    function fnUpdateHRA() {

        let eValue = document.getElementById('E').value;
        let jValue = document.getElementById('J').value;
        let kValue = document.getElementById('K').value;
        let lValue = document.getElementById('L').value;

        // Calculate when HRA value changed
        if (kValue !== NaN && kValue > 0) {
            let result = Number(parseInt(jValue) + parseInt(kValue));
            document.getElementById('L').value = Number((eValue - result).toFixed(2));
        }
        // if (lValue !== NaN && lValue > 0){
        //     document.getElementById('K').value = Number((jValue - lValue).toFixed(2));
        // }


        // if (jValue !== NaN && jValue > 0) {

        //     if (kValue !== NaN && kValue > 0) {
        //         document.getElementById('L').value = Number( (jValue - kValue).toFixed(2));
        //     }
        //     if (lValue !== NaN && lValue > 0){
        //         document.getElementById('K').value = Number((jValue - lValue).toFixed(2));
        //     }
        // }
        //let nValue = document.getElementById('N').value;
        //let oValue = document.getElementById('O').value;
        //let pValue = document.getElementById('P').value;
    }

    function fnUpdateTA() {

        let eValue = document.getElementById('E').value;
        let jValue = document.getElementById('J').value;
        let kValue = document.getElementById('K').value;
        let lValue = document.getElementById('L').value;

        // Calculate when HRA value changed
        if (lValue !== NaN && lValue > 0) {
            let result = Number(parseInt(jValue) + parseInt(lValue));
            document.getElementById('K').value = Number((eValue - result).toFixed(2));
        }
    }

    function fnUpdateBasic() {

        let jValue = document.getElementById('J').value;

        // Calculate when HRA value changed
        if (jValue !== NaN && jValue > 0) {

            let eValue = document.getElementById('E').value;
            let fValue = document.getElementById('F').value;
            let kValue = document.getElementById('K').value;
            let lValue = document.getElementById('L').value;

            document.getElementById('G').value = Number(parseInt(jValue) / parseInt(fValue));

            let nValue = document.getElementById('N');
            nValue.value = Number((parseFloat(jValue) * 0.12).toFixed(2));

            let oValue = document.getElementById('O');
            oValue.value = Number((parseFloat(jValue) * 0.0833).toFixed(2));

            let pValue = document.getElementById('P');
            pValue.value = Number((parseFloat(jValue) * 0.0367).toFixed(2));

            let result = Number(parseInt(jValue) + parseInt(kValue));
            document.getElementById('L').value = Number((eValue - result).toFixed(2));
        }
    }

    function fnUpdateActualPayable() {
        let aValue = document.getElementById('A').value;
        let bValue = document.getElementById('B').value;
        let cValue = document.getElementById('C').value;
        let eValue = document.getElementById('E');

        if (aValue !== NaN && aValue > 0 && bValue !== NaN && bValue > 0) {
            eValue.value = Number(parseInt(aValue) * parseInt(bValue));
            if (cValue !== NaN && cValue > 0) {
                let perHourAmount = Number(parseInt(bValue) / 12);
                let otResult = Number(parseInt(perHourAmount) * parseInt(cValue));
                eValue.value = Number(parseInt(eValue.value) + parseInt(otResult));
            }
        }
    }

    // window.onload = function () {
    //     alert('fn invoked for open new window');
    //     // Specify the URL and other window features
    //     var newWindow = window.open(location, '_blank');

    //     // Optionally focus on the new window
    //     if (newWindow) {
    //         newWindow.focus();
    //     }
    // };
</script>
#pragma checksum "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "58ebe57a9a53e8de8870317219f2f8efdfae63b15767fc180363fbd574f89f7d"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_HR_Views_ReportsHR_EditEmployeeSalaryBreakup), @"mvc.1.0.view", @"/Areas/HR/Views/ReportsHR/EditEmployeeSalaryBreakup.cshtml")]
namespace AspNetCore
{
    #line default
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Microsoft.AspNetCore.Mvc.Rendering;
    using global::Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\_ViewImports.cshtml"
using ERP

#nullable disable
    ;
#nullable restore
#line 2 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\_ViewImports.cshtml"
using ERP.Models

#nullable disable
    ;
#nullable restore
#line 3 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\_ViewImports.cshtml"
using Business.Entities

#nullable disable
    ;
#nullable restore
#line 4 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity

#nullable disable
    ;
#nullable restore
#line 5 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\_ViewImports.cshtml"
using Business.SQL

#nullable disable
    ;
#nullable restore
#line 6 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\_ViewImports.cshtml"
using Microsoft.AspNetCore.Authorization

#nullable disable
    ;
#nullable restore
#line 7 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\_ViewImports.cshtml"
using ERP.Enums

#nullable disable
    ;
#nullable restore
#line 8 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\_ViewImports.cshtml"
using ERP.Extensions

#nullable disable
    ;
#nullable restore
#line 9 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\_ViewImports.cshtml"
using ERP.Helpers

#nullable disable
    ;
#nullable restore
#line 10 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\_ViewImports.cshtml"
using Business.Entities.Dynamic

#nullable disable
    ;
#nullable restore
#line 1 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
 using System.Data;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"58ebe57a9a53e8de8870317219f2f8efdfae63b15767fc180363fbd574f89f7d", @"/Areas/HR/Views/ReportsHR/EditEmployeeSalaryBreakup.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"66ca4ed4d968d0cb63ad96b0820d0f1f680273fdde74e92383c120d6a96a5604", @"/Areas/HR/_ViewImports.cshtml")]
    #nullable restore
    public class Areas_HR_Views_ReportsHR_EditEmployeeSalaryBreakup : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<System.Data.DataTable>
    #nullable disable
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-area", "HR", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-controller", "ReportsHR", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "GetEmployeeSalarySummary", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", "hidden", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("employeeId"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("method", "post", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("formEditEmployeeSalaryBreakup"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("row g-3 needs-validation"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 4 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
  
    ViewData["Title"] = "Edit Employee Salary";
    Layout = "~/Views/Shared/_LayoutMaster.cshtml";

#line default
#line hidden
#nullable disable

#nullable restore
#line 8 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
  
    var dataset = Model;
    string dataTable = string.Empty;
    int? empId = ViewBag.EmployeeID;
    int? companyId = ViewBag.CompanyID;
    int? month = ViewBag.Month;
    int? empCatId = ViewBag.EmployeeCategoryID;
    int? year = ViewBag.Year;
    Dictionary<string, string> dynamicModel = new Dictionary<string, string>();

#line default
#line hidden
#nullable disable

            WriteLiteral(@"<div class=""container"" id=""employeeSalalrySummary"">
    <div class=""row"">
        <div class=""col-sm-12 col-md-12 col-lg-12 mx-auto"">
            <div class=""card border-0 shadow rounded-3"">
                <div class=""card-body"">

                    <div class=""col-sm-12 col-md-6 col-lg-6"">
                        <div class=""page-breadcrumb align-items-center"">
                            <div class=""p-2"">
                                <nav aria-label=""breadcrumb"">
                                    <ol class=""breadcrumb mb-0 p-0"">
                                        <li class=""breadcrumb-item"">
                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "58ebe57a9a53e8de8870317219f2f8efdfae63b15767fc180363fbd574f89f7d9092", async() => {
                WriteLiteral("<i class=\"bx bx-home-alt\"></i>");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Area = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Controller = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Action = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                        </li>
                                        <li class=""breadcrumb-item active"" aria-current=""page"">Edit Employee Salary</li>
                                    </ol>
                                </nav>
                            </div>
                        </div>
                    </div>
                    <hr />
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "58ebe57a9a53e8de8870317219f2f8efdfae63b15767fc180363fbd574f89f7d11102", async() => {
                WriteLiteral("\r\n                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("input", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "58ebe57a9a53e8de8870317219f2f8efdfae63b15767fc180363fbd574f89f7d11409", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.InputTypeName = (string)__tagHelperAttribute_3.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_3);
                __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => 
#nullable restore
#line 40 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                                       empId

#line default
#line hidden
#nullable disable
                );
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n\r\n                        <div class=\" col-sm-12 col-md-6 col-lg-6 border border-dark\" id=\"divForEarnings\">\r\n\r\n                            <div class=\"row mb-2\">\r\n                                <label");
                BeginWriteAttribute("for", " for=\"", 2122, "\"", 2128, 0);
                EndWriteAttribute();
                WriteLiteral(" class=\"col-sm-3 col-form-label \" color=\"blue\">EARNINGS:</label>\r\n                            </div>\r\n                            <div id=\"nestedDivForEarnings\">\r\n\r\n");
#nullable restore
#line 49 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                  
                                    if (Model != null && Model.Rows.Count > 0)
                                    {
                                        dataTable = Newtonsoft.Json.JsonConvert.SerializeObject(Model).ToString();
                                        int i = 0;
                                        var columnName = Model.Columns["SalaryTypeID"].ToString();
                                        foreach (DataRow item in Model.Rows)
                                        {
                                            int salaryTypeId = Convert.ToInt32(item[columnName]);
                                            if (salaryTypeId == 1)
                                            {
                                                string labelValue = Convert.ToString(item[13]);
                                                string formulatext = Convert.ToString(item[9]);
                                                string finalValue = (string.IsNullOrEmpty(labelValue) && string.IsNullOrEmpty(formulatext) && labelValue.Equals("") && formulatext.Equals("")) ? "0.00" : labelValue;


#line default
#line hidden
#nullable disable

                WriteLiteral("                                                <div class=\"row mb-1\">\r\n                                                    <div class=\"col-sm-3\">\r\n                                                        <label");
                BeginWriteAttribute("for", " for=\"", 3673, "\"", 3679, 0);
                EndWriteAttribute();
                WriteLiteral(" class=\"col-form-label\">");
                Write(
#nullable restore
#line 66 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                                                                              Convert.ToString(item[7])

#line default
#line hidden
#nullable disable
                );
                WriteLiteral("</label>\r\n                                                    </div>\r\n                                                    <div class=\"col-sm-1\">\r\n                                                        <label");
                BeginWriteAttribute("for", " for=\"", 3938, "\"", 3944, 0);
                EndWriteAttribute();
                WriteLiteral(" class=\"col-form-label\">(");
                Write(
#nullable restore
#line 69 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                                                                               Convert.ToString(item[8]).Replace(" ", "")

#line default
#line hidden
#nullable disable
                );
                WriteLiteral(")</label>\r\n                                                    </div>\r\n                                                    <div class=\"col-sm-5\">\r\n");
                WriteLiteral("\r\n");
                WriteLiteral("\r\n\r\n");
#nullable restore
#line 77 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                                          
                                                            if (Convert.ToString(item[8]).Replace(" ", "").Equals("A") || Convert.ToString(item[8]).Replace(" ", "").Equals("B") || Convert.ToString(item[8]).Replace(" ", "").Equals("C"))
                                                            {
                                                            // <input type="text" class="form-control" id="@Convert.ToString(item[8]).Replace(" ","")" placeholder="@Convert.ToString(item[9])" value="@finalValue" oninput="fnUpdateActualPayable()">
                                                                // Commented above line by Rahul Mistry on 14th June 2024 according to Sandip sir.


#line default
#line hidden
#nullable disable

                WriteLiteral("                                                                <input type=\"text\" class=\"form-control\"");
                BeginWriteAttribute("id", " id=\"", 5817, "\"", 5864, 1);
                WriteAttributeValue("", 5822, 
#nullable restore
#line 83 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                                                                                             Convert.ToString(item[8]).Replace(" ","")

#line default
#line hidden
#nullable disable
                , 5822, 42, false);
                EndWriteAttribute();
                BeginWriteAttribute("placeholder", " placeholder=\"", 5865, "\"", 5905, 1);
                WriteAttributeValue("", 5879, 
#nullable restore
#line 83 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                                                                                                                                                      Convert.ToString(item[9])

#line default
#line hidden
#nullable disable
                , 5879, 26, false);
                EndWriteAttribute();
                BeginWriteAttribute("value", " value=\"", 5906, "\"", 5925, 1);
                WriteAttributeValue("", 5914, 
#nullable restore
#line 83 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                                                                                                                                                                                         finalValue

#line default
#line hidden
#nullable disable
                , 5914, 11, false);
                EndWriteAttribute();
                BeginWriteAttribute("oninput", " oninput=\"", 5926, "\"", 5936, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n");
#nullable restore
#line 84 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                                            }
                                                            

#line default
#line hidden
#nullable disable

#nullable restore
#line 92 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                           

                                                            if (Convert.ToString(item[8]).Replace(" ", "").Equals("J"))
                                                            {
                                                            //<input type="text" class="form-control" id="@Convert.ToString(item[8]).Replace(" ","")" placeholder="@Convert.ToString(item[9])" value="@finalValue" oninput="fnUpdateBasic()">
                                                                // Commented above line by Rahul Mistry on 14th June 2024 according to Sandip sir.

#line default
#line hidden
#nullable disable

                WriteLiteral("                                                                <input type=\"text\" class=\"form-control\"");
                BeginWriteAttribute("id", " id=\"", 7527, "\"", 7574, 1);
                WriteAttributeValue("", 7532, 
#nullable restore
#line 98 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                                                                                             Convert.ToString(item[8]).Replace(" ","")

#line default
#line hidden
#nullable disable
                , 7532, 42, false);
                EndWriteAttribute();
                BeginWriteAttribute("placeholder", " placeholder=\"", 7575, "\"", 7615, 1);
                WriteAttributeValue("", 7589, 
#nullable restore
#line 98 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                                                                                                                                                      Convert.ToString(item[9])

#line default
#line hidden
#nullable disable
                , 7589, 26, false);
                EndWriteAttribute();
                BeginWriteAttribute("value", " value=\"", 7616, "\"", 7635, 1);
                WriteAttributeValue("", 7624, 
#nullable restore
#line 98 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                                                                                                                                                                                         finalValue

#line default
#line hidden
#nullable disable
                , 7624, 11, false);
                EndWriteAttribute();
                BeginWriteAttribute("oninput", " oninput=\"", 7636, "\"", 7646, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n");
#nullable restore
#line 99 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                                            }
                                                            if (Convert.ToString(item[8]).Replace(" ", "").Equals("K"))
                                                            {
                                                            // <input type="text" class="form-control" id="@Convert.ToString(item[8]).Replace(" ","")" placeholder="@Convert.ToString(item[9])" value="@finalValue" oninput="fnUpdateHRA()">
                                                                // Commented above line by Rahul Mistry on 14th June 2024 according to Sandip sir.

#line default
#line hidden
#nullable disable

                WriteLiteral("                                                                <input type=\"text\" class=\"form-control\"");
                BeginWriteAttribute("id", " id=\"", 8386, "\"", 8433, 1);
                WriteAttributeValue("", 8391, 
#nullable restore
#line 104 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                                                                                             Convert.ToString(item[8]).Replace(" ","")

#line default
#line hidden
#nullable disable
                , 8391, 42, false);
                EndWriteAttribute();
                BeginWriteAttribute("placeholder", " placeholder=\"", 8434, "\"", 8474, 1);
                WriteAttributeValue("", 8448, 
#nullable restore
#line 104 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                                                                                                                                                      Convert.ToString(item[9])

#line default
#line hidden
#nullable disable
                , 8448, 26, false);
                EndWriteAttribute();
                BeginWriteAttribute("value", " value=\"", 8475, "\"", 8494, 1);
                WriteAttributeValue("", 8483, 
#nullable restore
#line 104 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                                                                                                                                                                                         finalValue

#line default
#line hidden
#nullable disable
                , 8483, 11, false);
                EndWriteAttribute();
                BeginWriteAttribute("oninput", " oninput=\"", 8495, "\"", 8505, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n");
#nullable restore
#line 105 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                                            }
                                                            if (Convert.ToString(item[8]).Replace(" ", "").Equals("L"))
                                                            {
                                                            // <input type="text" class="form-control" id="@Convert.ToString(item[8]).Replace(" ","")" placeholder="@Convert.ToString(item[9])" value="@finalValue" oninput="fnUpdateTA()">
                                                                // Commented above line by Rahul Mistry on 14th June 2024 according to Sandip sir.

#line default
#line hidden
#nullable disable

                WriteLiteral("                                                                <input type=\"text\" class=\"form-control\"");
                BeginWriteAttribute("id", " id=\"", 9244, "\"", 9291, 1);
                WriteAttributeValue("", 9249, 
#nullable restore
#line 110 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                                                                                             Convert.ToString(item[8]).Replace(" ","")

#line default
#line hidden
#nullable disable
                , 9249, 42, false);
                EndWriteAttribute();
                BeginWriteAttribute("placeholder", " placeholder=\"", 9292, "\"", 9332, 1);
                WriteAttributeValue("", 9306, 
#nullable restore
#line 110 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                                                                                                                                                      Convert.ToString(item[9])

#line default
#line hidden
#nullable disable
                , 9306, 26, false);
                EndWriteAttribute();
                BeginWriteAttribute("value", " value=\"", 9333, "\"", 9352, 1);
                WriteAttributeValue("", 9341, 
#nullable restore
#line 110 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                                                                                                                                                                                         finalValue

#line default
#line hidden
#nullable disable
                , 9341, 11, false);
                EndWriteAttribute();
                BeginWriteAttribute("oninput", " oninput=\"", 9353, "\"", 9363, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n");
#nullable restore
#line 111 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                                            }
                                                            if (!Convert.ToString(item[8]).Replace(" ", "").Equals("A") && !Convert.ToString(item[8]).Replace(" ", "").Equals("B") && !Convert.ToString(item[8]).Replace(" ", "").Equals("C") && !Convert.ToString(item[8]).Replace(" ", "").Equals("J") && !Convert.ToString(item[8]).Replace(" ", "").Equals("K") && !Convert.ToString(item[8]).Replace(" ", "").Equals("L"))
                                                            {
                                                                // <input type="text" class="form-control" id="@Convert.ToString(item[8]).Replace(" ","")" placeholder="@Convert.ToString(item[9])" value="@finalValue" oninput="fnUpdateAmount()">
                                                                // Commented above line by Rahul Mistry on 14th June 2024 according to Sandip sir.

#line default
#line hidden
#nullable disable

                WriteLiteral("                                                                <input type=\"text\" class=\"form-control\"");
                BeginWriteAttribute("id", " id=\"", 10406, "\"", 10453, 1);
                WriteAttributeValue("", 10411, 
#nullable restore
#line 116 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                                                                                             Convert.ToString(item[8]).Replace(" ","")

#line default
#line hidden
#nullable disable
                , 10411, 42, false);
                EndWriteAttribute();
                BeginWriteAttribute("placeholder", " placeholder=\"", 10454, "\"", 10494, 1);
                WriteAttributeValue("", 10468, 
#nullable restore
#line 116 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                                                                                                                                                      Convert.ToString(item[9])

#line default
#line hidden
#nullable disable
                , 10468, 26, false);
                EndWriteAttribute();
                BeginWriteAttribute("value", " value=\"", 10495, "\"", 10514, 1);
                WriteAttributeValue("", 10503, 
#nullable restore
#line 116 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                                                                                                                                                                                         finalValue

#line default
#line hidden
#nullable disable
                , 10503, 11, false);
                EndWriteAttribute();
                BeginWriteAttribute("oninput", " oninput=\"", 10515, "\"", 10525, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n");
#nullable restore
#line 117 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                                            }
                                                        

#line default
#line hidden
#nullable disable

                WriteLiteral("                                                        <input type=\"hidden\"");
                BeginWriteAttribute("value", " value=\"", 10727, "\"", 10761, 1);
                WriteAttributeValue("", 10735, 
#nullable restore
#line 119 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                                                                     Convert.ToString(item[6])

#line default
#line hidden
#nullable disable
                , 10735, 26, false);
                EndWriteAttribute();
                WriteLiteral(">\r\n                                                    </div>\r\n                                                    <div class=\"col-sm-3\">\r\n                                                        <label");
                BeginWriteAttribute("for", " for=\"", 10963, "\"", 10969, 0);
                EndWriteAttribute();
                WriteLiteral(" class=\"col-form-label\">");
                Write(
#nullable restore
#line 122 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                                                                              Convert.ToString(item[9])

#line default
#line hidden
#nullable disable
                );
                WriteLiteral("</label>\r\n                                                    </div>\r\n                                                </div>\r\n");
#nullable restore
#line 125 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                            }
                                            i++;
                                        }
                                    }
                                

#line default
#line hidden
#nullable disable

                WriteLiteral(@"
                            </div>
                        </div>

                        <div class="" col-sm-12 col-md-6 col-lg-6 border border-dark"" id=""divForDeductions"">

                            <div class=""row"">
                                <label");
                BeginWriteAttribute("for", " for=\"", 11628, "\"", 11634, 0);
                EndWriteAttribute();
                WriteLiteral(" class=\"col-sm-3 col-form-label \" color=\"blue\">DEDUCTIONS:</label>\r\n                            </div>\r\n                            <div id=\"nestedDivForDeductions\">\r\n\r\n");
#nullable restore
#line 141 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                  
                                    if (Model != null && Model.Rows.Count > 0)
                                    {
                                        int i = 0;
                                        var columnName = Model.Columns["SalaryTypeID"].ToString();
                                        foreach (DataRow item in Model.Rows)
                                        {
                                            int salaryTypeId = Convert.ToInt32(item[columnName]);
                                            if (salaryTypeId == 2)
                                            {
                                                string labelValue = Convert.ToString(item[13]);
                                                string formulatext = Convert.ToString(item[9]);
                                                string finalValue = (string.IsNullOrEmpty(labelValue) && string.IsNullOrEmpty(formulatext) && labelValue.Equals("") && formulatext.Equals("")) ? "0.00" : labelValue;

#line default
#line hidden
#nullable disable

                WriteLiteral("                                                <div class=\"row mb-1\">\r\n                                                    <div class=\"col-sm-3\">\r\n                                                        <label");
                BeginWriteAttribute("for", " for=\"", 13065, "\"", 13071, 0);
                EndWriteAttribute();
                WriteLiteral(" class=\"col-form-label\">");
                Write(
#nullable restore
#line 156 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                                                                              Convert.ToString(item[7])

#line default
#line hidden
#nullable disable
                );
                WriteLiteral("</label>\r\n                                                    </div>\r\n                                                    <div class=\"col-sm-1\">\r\n                                                        <label");
                BeginWriteAttribute("for", " for=\"", 13330, "\"", 13336, 0);
                EndWriteAttribute();
                WriteLiteral(" class=\"col-form-label\">(");
                Write(
#nullable restore
#line 159 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                                                                               Convert.ToString(item[8]).Replace(" ", "")

#line default
#line hidden
#nullable disable
                );
                WriteLiteral(")</label>\r\n                                                    </div>\r\n                                                    <div class=\"col-sm-5\">\r\n\r\n");
                WriteLiteral("                                                        <input type=\"text\" class=\"form-control\"");
                BeginWriteAttribute("id", " id=\"", 14027, "\"", 14074, 1);
                WriteAttributeValue("", 14032, 
#nullable restore
#line 165 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                                                                                     Convert.ToString(item[8]).Replace(" ","")

#line default
#line hidden
#nullable disable
                , 14032, 42, false);
                EndWriteAttribute();
                BeginWriteAttribute("placeholder", " placeholder=\"", 14075, "\"", 14115, 1);
                WriteAttributeValue("", 14089, 
#nullable restore
#line 165 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                                                                                                                                              Convert.ToString(item[9])

#line default
#line hidden
#nullable disable
                , 14089, 26, false);
                EndWriteAttribute();
                BeginWriteAttribute("value", " value=\"", 14116, "\"", 14135, 1);
                WriteAttributeValue("", 14124, 
#nullable restore
#line 165 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                                                                                                                                                                                 finalValue

#line default
#line hidden
#nullable disable
                , 14124, 11, false);
                EndWriteAttribute();
                BeginWriteAttribute("oninput", " oninput=\"", 14136, "\"", 14146, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n                                                        <input type=\"hidden\"");
                BeginWriteAttribute("value", " value=\"", 14226, "\"", 14260, 1);
                WriteAttributeValue("", 14234, 
#nullable restore
#line 166 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                                                                     Convert.ToString(item[6])

#line default
#line hidden
#nullable disable
                , 14234, 26, false);
                EndWriteAttribute();
                WriteLiteral(">\r\n                                                    </div>\r\n                                                    <div class=\"col-sm-3\">\r\n                                                        <label");
                BeginWriteAttribute("for", " for=\"", 14462, "\"", 14468, 0);
                EndWriteAttribute();
                WriteLiteral(" class=\"col-form-label\">");
                Write(
#nullable restore
#line 169 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                                                                              Convert.ToString(item[9])

#line default
#line hidden
#nullable disable
                );
                WriteLiteral("</label>\r\n                                                    </div>\r\n                                                </div>\r\n");
#nullable restore
#line 172 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                                            }
                                            i++;
                                        }
                                    }
                                

#line default
#line hidden
#nullable disable

                WriteLiteral(@"
                            </div>
                        </div>

                        <!--div>
                            <button type=""button"" class=""btn btn-primary btn-info px-5 ladda-button"" onclick=""fnUpdateAmount()"">Calculation on Formula</button>

                            <label for="""" class=""col-sm-4 col-form-label text-end"">Salary Calculation with Formula</label>&nbsp;
                        </!--div>-->

                        <div>
                            <button type=""button"" onclick=""fnOpenConfirmationBox()"" class=""btn btn-primary btn-info px-5 ladda-button"" id=""btnApprovSaveEmployeeSalaryBreakup"">Approve & Save</button>
");
                WriteLiteral("                        </div>\r\n                    ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Method = (string)__tagHelperAttribute_5.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_5);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </div>
            </div>
        </div>
    </div>
</div>
<div class=""modal fade"" id=""confirmationModal"" tabindex=""-1"" aria-labelledby=""exampleModalLabel"" aria-hidden=""true"">
    <div class=""modal-dialog"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h1 class=""modal-title fs-5"" id=""exampleModalLabel"">User Confirmation</h1>
                <button type=""button"" class=""btn-close"" data-bs-dismiss=""modal"" aria-label=""Close""></button>
            </div>
            <div class=""modal-body"">
                Are you sure you want to verify and approve employee salary?
            </div>
            <div class=""modal-footer"">
                <a onclick=""fnApprovSaveCalculatedSalary()"" class=""btn btn-primary"">Confirm</a>
                <!--<button type=""button"" class=""btn btn-primary"" onclick=""fnAddParty()"">Save</button>-->
                <button type=""button"" class=""btn btn-secondary"" data-bs-dismiss=""modal"">Back</button>
          ");
            WriteLiteral("  </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n");
            Write(
#nullable restore
#line 217 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
 await Html.PartialAsync("_ValidationScriptsPartial")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@"

<script type=""text/javascript"">

    /* function fnSaveEmployeeSalaryBreakup() {
         var ls = laddaStart('btnSaveEmployeeSalaryBreakup');
         modeldata = $(""#formEditEmployeeSalaryBreakup"").serialize();
         $.ajax({
             type: 'POST',
             url: '/Admin/Employee/AddUpdateEmployeeSalaryBreakup/',
             data: modeldata,
             dataType: 'json',
             beforeSend: function () { },
             success: function (data) {
                 console.log(data.status);
                 if (data.status) {
                     //notification
                     //$(""#canvasEmployeeHRAdministration"").hide();//('hide');
                     var test = Lobibox.notify('success', {
                         pauseDelayOnHover: true,
                         size: 'mini',
                         icon: 'bx bx-check-circle',
                         continueDelayOnInactiveTab: false,
                         position: 'bottom right',
                     ");
            WriteLiteral(@"    msg: data.message,
                     });
                     setTimeout(
                         function () {
                             //window.location.reload();
                             $(""#formEditEmployeeSalaryBreakup"").load(window.location.href + "" #formEditEmployeeSalaryBreakup"");
                         }, 3000);

                 }
                 else {
                     Lobibox.notify('error', {
                         pauseDelayOnHover: true,
                         size: 'mini',
                         icon: 'bx bx-check-circle',
                         continueDelayOnInactiveTab: false,
                         position: 'bottom right',
                         msg: 'MessageHelper.Error'
                     });
                 }
             },
             error: function (error) {
                 laddaStop(ls);
                 Lobibox.notify('error', {
                     pauseDelayOnHover: true,
                     size: 'mini',
       ");
            WriteLiteral(@"              icon: 'bx bx-check-circle',
                     continueDelayOnInactiveTab: false,
                     position: 'bottom right',
                     msg: 'MessageHelper.Error'
                 });
             }
         }).always(function () {
             hideloader();
         });

     };*/

    var jsonObjectOK = ");
            Write(
#nullable restore
#line 278 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                        Html.Raw(dataTable)

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@";
    var filteredResult;

    function fnCalculateSalary() {

        var dataTableObject = jsonObjectOK;

        //let ctc = document.getElementById('CostToCompany').value;

        filteredResult = dataTableObject.filter((obj) => {
            return obj.SalaryFormulaText !== null && obj.SalaryFormulaText !== '';
        });

        //alert(test[0].SalaryFormulaText);
        //const divEarnings = document.getElementById('divForEarnings');
        //const divWithInput = divEarnings.querySelectorAll('input[type=text]');
        //for (let i = 0; i < divWithInput.length; i++) {
        //    const inputId = divWithInput[i].id;
        //}
        let indexLength = Number(filteredResult.length - 1);
        if (filteredResult.length > 0) {
            $.each(filteredResult, function (i, k) {
                let test = k.SalaryFormulaText;
                let targetId = test.charAt(0);
                var slicedValues = test.slice(2);
                if (test !== null && test !== """")");
            WriteLiteral(@" {
                    for (const strChar of slicedValues) {
                        var replaceValue = document.getElementById(strChar);
                        if (replaceValue) {
                            let repValue = replaceValue.value;
                            slicedValues = slicedValues.replace(strChar, repValue);
                        }
                        else {
                            if (!replaceValue && slicedValues.includes('-' + strChar) && (strChar !== '0' && strChar !== '.')) {
                                slicedValues = slicedValues.replace(strChar, 0);
                            }
                            if (!replaceValue && slicedValues.includes('*' + strChar) && (strChar !== '0' && strChar !== '.')) {
                                slicedValues = slicedValues.replace(strChar, 1);
                            }
                        }
                    }
                }
                let calcValue = slicedValues;//.replace('D', 1).replace('I'");
            WriteLiteral(@", 1);
                let id = document.getElementById(targetId);
                var vals = eval(calcValue);
                if (id && vals) {
                    id.value = Number(parseFloat(vals.toFixed(0)));
                    if (indexLength === i) {
                        document.getElementById('X').value = Number(parseFloat(vals.toFixed(0)));
                    }
                }
            });
        }
    }

    /*window.onload = function () {
        alert('unwanted function invoked.');
        let urlEmployeeActualDays = 'Url.Action(""GetEmployeeSalaryBreakupDetail"",""Employee"")';
        let employeeId = document.getElementById('employeeId').value;
        let params = { employeeId: employeeId };

        $.ajax({
            type: 'GET',
            url: urlEmployeeActualDays,
            data: params,
            dataType: 'json',
            success: function (data) {
                if (data.status) {
                    alert('unwanted function invoked.');
    ");
            WriteLiteral(@"            }
                else {
                    Lobibox.notify('error', {
                        pauseDelayOnHover: true,
                        size: 'mini',
                        icon: 'bx bx-check-circle',
                        continueDelayOnInactiveTab: false,
                        position: 'bottom right',
                        msg: 'Error to load employees actual days.'
                    });
                }
            },
            error: function (error) {
                laddaStop(ls);
                Lobibox.notify('error', {
                    pauseDelayOnHover: true,
                    size: 'mini',
                    icon: 'bx bx-check-circle',
                    continueDelayOnInactiveTab: false,
                    position: 'bottom right',
                    msg: 'MessageHelper.Error'
                });
            }
        }).always(function () {
            hideloader();
        });

    };*/

    function fnOpenConfirmationBox() {");
            WriteLiteral("\r\n        $(\'#confirmationModal\').modal(\'show\');\r\n    }\r\n\r\n    function fnApprovSaveCalculatedSalary() {\r\n\r\n        let employeeId = ");
            Write(
#nullable restore
#line 382 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                          empId

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(";\r\n        let companyId = ");
            Write(
#nullable restore
#line 383 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                         companyId

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(";\r\n        let month = ");
            Write(
#nullable restore
#line 384 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                     month

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(";\r\n        let year = ");
            Write(
#nullable restore
#line 385 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                    year

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(";\r\n        let empCateId = ");
            Write(
#nullable restore
#line 386 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                         empCatId

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@";

        // const divEarnings = document.getElementById('divForEarnings');
        // const divEarningsWithInput = divEarnings.querySelectorAll('input[type=text]');
        // const divEarningsWithHidden = divEarnings.querySelectorAll('input[type=hidden]');

        const nesteddivForEarnings = document.getElementById('nestedDivForEarnings');
        const divEarningsWithLabel = nesteddivForEarnings.querySelectorAll('label');

        // const divDeductions = document.getElementById('divForDeductions');
        // const divDeductionsWithInput = divDeductions.querySelectorAll('input[type=text]');
        // const divDeductionsWithHidden = divDeductions.querySelectorAll('input[type=hidden]');

        const nesteddivForDeductions = document.getElementById('nestedDivForDeductions');
        const divDeductionsWithLabel = nesteddivForDeductions.querySelectorAll('label');

        var jsonFinalSalaryCalculationData = [];

        for (let i = 0; i < divEarningsWithLabel.length; i += 3) {

   ");
            WriteLiteral(@"         const pair = [divEarningsWithLabel[i], divEarningsWithLabel[i + 1], divEarningsWithLabel[i + 2]].filter(Boolean);

            const tempJson = {
                'SalaryHeadName': pair[0].textContent,
                'SalaryHeadLabel': pair[1].textContent.replace('(', '').replace(')', ''),
                'SalaryFormula': pair[2].textContent,
                'CalculatedValue': document.getElementById(pair[1].textContent.replace('(', '').replace(')', '')).value
            };

            jsonFinalSalaryCalculationData.push(tempJson);
        }

        for (let i = 0; i < divDeductionsWithLabel.length; i += 3) {

            const pair = [divDeductionsWithLabel[i], divDeductionsWithLabel[i + 1], divDeductionsWithLabel[i + 2]].filter(Boolean);

            const tempJson = {
                'SalaryHeadName': pair[0].textContent,
                'SalaryHeadLabel': pair[1].textContent.replace('(', '').replace(')', ''),
                'SalaryFormula': pair[2].textContent,
           ");
            WriteLiteral(@"     'CalculatedValue': document.getElementById(pair[1].textContent.replace('(', '').replace(')', '')).value
            };

            jsonFinalSalaryCalculationData.push(tempJson);
        }
        /*for (let i = 0; i < divDeductionsWithHidden.length; i++) {
            const salaryHeadID = divDeductionsWithHidden[i].value;
            const salaryHeadValue = divDeductionsWithInput[i].value;
            const tempJson = { 'EmployeeSalaryBreakupID': 0, 'EmployeeID': employeeId, 'SalaryHeadID': salaryHeadID, 'SalaryHeadValue': salaryHeadValue };
            jsonFinalSalaryCalculationData.push(tempJson);
        }*/

        var jsonString = JSON.stringify(jsonFinalSalaryCalculationData);
        let parameters = { employeeFinalSalaryJson: jsonString, employeeId: employeeId, month: month, year: year, companyId: companyId, employeeCategoryId: empCateId };
        $.ajax({
            type: 'post',
            url: '/HR/ReportsHR/ApproveSaveEmployeeSalary',
            data: parameters,
     ");
            WriteLiteral(@"       dataType: 'json',
            success: function (data) {
                if (data.status) {
                    $('#confirmationModal').modal('hide');
                    var test = Lobibox.notify('success', {
                        pauseDelayOnHover: true,
                        size: 'mini',
                        icon: 'bx bx-check-circle',
                        continueDelayOnInactiveTab: false,
                        position: 'bottom right',
                        msg: 'Employee salary verified and approved successfully.',
                    });
                    setTimeout(
                        function () {
                            //window.location.reload();

                            $(""#formEditEmployeeSalaryBreakup"").load(window.location.href + "" #formEditEmployeeSalaryBreakup"");
                        }, 3000);

                }
                else {
                    Lobibox.notify('error', {
                        pauseDelayOnHover: true,
  ");
            WriteLiteral(@"                      size: 'mini',
                        icon: 'bx bx-check-circle',
                        continueDelayOnInactiveTab: false,
                        position: 'bottom right',
                        msg: 'Employee salary not approved due to unable to verify salary.'
                    });
                }
            },
            error: function (error) {
                alert('url not correct. | ERROR FUNCTION');
                laddaStop(ls);
                Lobibox.notify('error', {
                    pauseDelayOnHover: true,
                    size: 'mini',
                    icon: 'bx bx-check-circle',
                    continueDelayOnInactiveTab: false,
                    position: 'bottom right',
                    msg: '");
            Write(
#nullable restore
#line 484 "D:\GitHub\SUN\sunerpm2l\ERP\Areas\HR\Views\ReportsHR\EditEmployeeSalaryBreakup.cshtml"
                           MessageHelper.Error

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@"'
                });
            }
        }).always(function () {
            hideloader();
        });
    };

    function fnUpdateAmount() {

        let actualDays = parseFloat(document.getElementById('A').value) ?? 0;
        let actualWages = parseFloat(document.getElementById('B').value) ?? 0;
        let otHours = parseFloat(document.getElementById('C').value) ?? 0;
        let interstOnLoan = parseFloat(document.getElementById('D').value) ?? 0;
        let actualPayable = parseFloat(document.getElementById('E').value) ?? 0;
        let noOfDays = parseFloat(document.getElementById('F').value) ?? 0;
        let basicPerDay = parseFloat(document.getElementById('G').value) ?? 0;
        let daPerDay = parseFloat(document.getElementById('H').value) ?? 0;

        let total = basicPerDay + daPerDay;
        let daPercent = Number(((daPerDay / total) * 100).toFixed(2));
        let basicPercent = Number((100 - daPercent).toFixed(2));


        if (actualDays !== NaN && actualDays ");
            WriteLiteral(@">= 0 && actualPayable !== NaN && actualPayable >= 0) {

            // if (interstOnLoan !== NaN && interstOnLoan > 0) {
            //     document.getElementById('E').value = Number(actualPayable - document.getElementById('E').value);
            // }
            document.getElementById('B').value = Number((actualPayable / actualDays).toFixed(2));

            let jValue = document.getElementById('J');
            jValue.value = Number(total * noOfDays);

            let kValue = document.getElementById('K');
            kValue.value = Number(actualPayable * 0.3);

            let lValue = document.getElementById('L');
            lValue.value = Number(actualPayable - parseFloat(jValue.value) - parseFloat(kValue.value));

            let qValue = document.getElementById('Q');
            qValue.value = Number(parseFloat(jValue.value) + parseFloat(kValue.value) + parseFloat(lValue.value));

            let nValue = document.getElementById('N');
            nValue.value = Number((parseFloa");
            WriteLiteral(@"t(jValue.value) * 0.12).toFixed(2));

            let oValue = document.getElementById('O');
            oValue.value = Number((parseFloat(jValue.value) * 0.0833).toFixed(2));

            let pValue = document.getElementById('P');
            pValue.value = Number((parseFloat(jValue.value) * 0.0367).toFixed(2));

            let xValue = document.getElementById('X');
            let rValue = 0;

            if (qValue.value > 11999) {
                let newRValue = document.getElementById('R');
                rValue = newRValue.value;
            }

            let sValue = document.getElementById('S');
            let tValue = document.getElementById('T');
            let uValue = document.getElementById('U');
            let vValue = document.getElementById('V');
            let wValue = document.getElementById('W');

            xValue.value = Number(parseFloat(qValue.value) - parseFloat(rValue) - parseFloat(sValue.value) - parseFloat(tValue.value) - parseFloat(uValue.value) - pars");
            WriteLiteral(@"eFloat(wValue.value) - parseFloat(vValue.value));
        }
    };

    function fnUpdateHRA() {

        let eValue = document.getElementById('E').value;
        let jValue = document.getElementById('J').value;
        let kValue = document.getElementById('K').value;
        let lValue = document.getElementById('L').value;

        // Calculate when HRA value changed
        if (kValue !== NaN && kValue > 0) {
            let result = Number(parseInt(jValue) + parseInt(kValue));
            document.getElementById('L').value = Number((eValue - result).toFixed(2));
        }
        // if (lValue !== NaN && lValue > 0){
        //     document.getElementById('K').value = Number((jValue - lValue).toFixed(2));
        // }


        // if (jValue !== NaN && jValue > 0) {

        //     if (kValue !== NaN && kValue > 0) {
        //         document.getElementById('L').value = Number( (jValue - kValue).toFixed(2));
        //     }
        //     if (lValue !== NaN && lValue > 0){
   ");
            WriteLiteral(@"     //         document.getElementById('K').value = Number((jValue - lValue).toFixed(2));
        //     }
        // }
        //let nValue = document.getElementById('N').value;
        //let oValue = document.getElementById('O').value;
        //let pValue = document.getElementById('P').value;
    }

    function fnUpdateTA() {

        let eValue = document.getElementById('E').value;
        let jValue = document.getElementById('J').value;
        let kValue = document.getElementById('K').value;
        let lValue = document.getElementById('L').value;

        // Calculate when HRA value changed
        if (lValue !== NaN && lValue > 0) {
            let result = Number(parseInt(jValue) + parseInt(lValue));
            document.getElementById('K').value = Number((eValue - result).toFixed(2));
        }
    }

    function fnUpdateBasic() {

        let jValue = document.getElementById('J').value;

        // Calculate when HRA value changed
        if (jValue !== NaN && jValue >");
            WriteLiteral(@" 0) {

            let eValue = document.getElementById('E').value;
            let fValue = document.getElementById('F').value;
            let kValue = document.getElementById('K').value;
            let lValue = document.getElementById('L').value;

            document.getElementById('G').value = Number(parseInt(jValue) / parseInt(fValue));

            let nValue = document.getElementById('N');
            nValue.value = Number((parseFloat(jValue) * 0.12).toFixed(2));

            let oValue = document.getElementById('O');
            oValue.value = Number((parseFloat(jValue) * 0.0833).toFixed(2));

            let pValue = document.getElementById('P');
            pValue.value = Number((parseFloat(jValue) * 0.0367).toFixed(2));

            let result = Number(parseInt(jValue) + parseInt(kValue));
            document.getElementById('L').value = Number((eValue - result).toFixed(2));
        }
    }

    function fnUpdateActualPayable() {
        let aValue = document.getElementByI");
            WriteLiteral(@"d('A').value;
        let bValue = document.getElementById('B').value;
        let cValue = document.getElementById('C').value;
        let eValue = document.getElementById('E');

        if (aValue !== NaN && aValue > 0 && bValue !== NaN && bValue > 0) {
            eValue.value = Number(parseInt(aValue) * parseInt(bValue));
            if (cValue !== NaN && cValue > 0) {
                let perHourAmount = Number(parseInt(bValue) / 12);
                let otResult = Number(parseInt(perHourAmount) * parseInt(cValue));
                eValue.value = Number(parseInt(eValue.value) + parseInt(otResult));
            }
        }
    }

    // window.onload = function () {
    //     alert('fn invoked for open new window');
    //     // Specify the URL and other window features
    //     var newWindow = window.open(location, '_blank');

    //     // Optionally focus on the new window
    //     if (newWindow) {
    //         newWindow.focus();
    //     }
    // };
</script>");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<System.Data.DataTable> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
